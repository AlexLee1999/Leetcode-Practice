class DSU {
public:
    DSU(int n) {
        parent = vector<int>(n, 0);
        rank = vector<int>(n, 0);
        setsize = vector<int>(n, 1);
        for (int i=0; i<parent.size(); ++i) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    bool join(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        if (rootx == rooty) {
            return false;
        } else {
            if (rank[rootx] > rank[rooty]) {
                parent[rooty] = rootx;
                setsize[rootx] += setsize[rooty];
            } else if (rank[rootx] < rank[rooty]) {
                parent[rootx] = rooty;
                setsize[rooty] += setsize[rootx];
            } else {
                parent[rootx] = rooty;
                setsize[rooty] += setsize[rootx];
                rank[rootx] ++;
            }
        }
        return true;
    }
    
    int size(int x) {
        return setsize[x];
    }
private:
    vector<int> parent;
    vector<int> rank;
    vector<int> setsize;
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU* mySet = new DSU(n);
        unordered_map<int, int> count;
        for (int i=0; i<n; ++i) {
            for (int j=i+1; j<n; ++j) {
                if (graph[i][j] == 1) {
                    mySet->join(i, j);
                }
            }
        }
        for (int i=0; i<initial.size(); ++i) {
            count[mySet->find(initial[i])] ++;
        }
        bool found = false;
        int max_node = -1;
        int max_size = 0;
        for (int i=0; i<initial.size(); ++i) {
            if (count[mySet->find(initial[i])] == 1) {
                found = true;
                if (mySet->size(mySet->find(initial[i])) > max_size) {
                    max_size = mySet->size(mySet->find(initial[i]));
                    max_node = initial[i];
                } else if (mySet->size(mySet->find(initial[i])) == max_size && initial[i] < max_node){
                    max_node = initial[i];
                }
            }
        }
        int node = *min_element(initial.begin(), initial.end());
        return found ? max_node : node;
    }
};
// Time : O(N^2 a(N))
// Space : O(N^2)